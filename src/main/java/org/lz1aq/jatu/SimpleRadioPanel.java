package org.lz1aq.jatu;

import java.io.File;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JToggleButton;
import javax.swing.filechooser.FileNameExtensionFilter;
import jssc.SerialPortList;
import org.lz1aq.pyrig_interfaces.*;
import org.lz1aq.rsi.Radio;
import org.lz1aq.rsi.event.RadioListener;
import org.apache.commons.lang3.StringUtils;
import org.lz1aq.rsi.event.ConfirmationEvent;
import org.lz1aq.rsi.event.FrequencyEvent;
import org.lz1aq.rsi.event.ModeEvent;
import org.lz1aq.rsi.event.NotsupportedEvent;
import org.lz1aq.utils.Misc;
import org.lz1aq.utils.RadioVfos;



/**
 *
 * @author potty
 */
public class SimpleRadioPanel extends javax.swing.JFrame
{  
  private Radio         radio;
  private JFileChooser  chooser;
  private I_Radio       radioParser;    
  
  private static final Logger logger = Logger.getLogger(Radio.class.getName());
  
  /**
   * Creates new form SimpleRadioPanel
   */
  public SimpleRadioPanel()
  {
    
    initComponents(); // Generated by the Form Editor
    init();           // Custom initializations
  }
  
  
  /**
   * Method called within the constructor to do initializations different than
   * the ones done by the Form Editor
   */
  private void init()
  {
    // Configure the FileChooser
    this.chooser = new JFileChooser();
    chooser.setFileFilter(new FileNameExtensionFilter("Python files", "py"));
    chooser.setCurrentDirectory(new File(System.getProperty("user.dir")));
    
  }
  
  
  /**
   * @return Returns a new DefaultComboBoxModel containing all available bands
   */
  private DefaultComboBoxModel getBandsComboboxModel()
  {
    return new DefaultComboBoxModel(new String[] { "1.8", "3.5", "7", "10", "14", "18", "21", "24", "28" });
  }
  
  
  /**
   * @return Returns a new DefaultComboBoxModel containing all available COM ports
   */
  private DefaultComboBoxModel getComportsComboboxModel()
  {
    String[] portNames = SerialPortList.getPortNames();
    return new DefaultComboBoxModel(portNames);
  }
  
  
  /**
   * Fills the combo box "Modes" with the available Modes
   */
  private void initModesCombobox()
  {
    DefaultComboBoxModel comboMode = new DefaultComboBoxModel(this.radioParser.getAvailableModes().toUpperCase().split(" "));
    modesCombobox.setModel(comboMode);
  }
  
  
  private void initInfoTextarea()
  {
    String manufacturer = radioParser.getManufacturer();
    infoTextarea.append("\n");
    infoTextarea.append("manufacturer: " + manufacturer);
    infoTextarea.append("\n");
    infoTextarea.append("model: " + radioParser.getModel());
    infoTextarea.append("\n");
    I_SerialSettings serialSettings = radioParser.getSerialPortSettings();
    infoTextarea.append("serial port settings: " + serialSettings.toString());
    infoTextarea.append("\n");
  }
  
  
  /**
   * Handlers for events coming from the radio
   */
  private class LocalRadioListener implements RadioListener
  {
    @Override
    public void notsupportedEvent(NotsupportedEvent e){} // not interested

    @Override
    public void confirmationEvent(ConfirmationEvent e){} // not interested

    @Override
    public void frequencyEvent(final FrequencyEvent e)
    {
      /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable()
      {
        @Override
        public void run()
        {
          if(e.getVfo() == RadioVfos.A)
            frequencyATextfield.setText(Misc.formatFrequency(e.getFrequency()));
          else if(e.getVfo() == RadioVfos.B)
            frequencyBTextfield.setText(Misc.formatFrequency(e.getFrequency()));
          else
          {
            frequencyATextfield.setText(Misc.formatFrequency(e.getFrequency()));
            logger.warning("Frequency event from unknown VFO!");
          }
            
        }
      });
    }

    @Override
    public void modeEvent(final ModeEvent e)
    {
       /* Create and display the form */
      java.awt.EventQueue.invokeLater(new Runnable()
      {
        @Override
        public void run()
        {
          if(e.getVfo() == RadioVfos.A)
            modeATextfield.setText(e.getMode().toString());
          else if(e.getVfo() == RadioVfos.B)
            modeBTextfield.setText(e.getMode().toString());
          else
          {
            modeATextfield.setText(e.getMode().toString());
            logger.warning("Mode event from unknown VFO!");
          }
          
        }
      });
    }

  }
  

  
  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    java.awt.GridBagConstraints gridBagConstraints;

    radioPanel = new javax.swing.JPanel();
    displayPanel = new javax.swing.JPanel();
    vfoAPanel = new javax.swing.JPanel();
    frequencyATextfield = new javax.swing.JTextField();
    modeATextfield = new javax.swing.JTextField();
    vfoBPanel = new javax.swing.JPanel();
    frequencyBTextfield = new javax.swing.JTextField();
    modeBTextfield = new javax.swing.JTextField();
    settingsPanel = new javax.swing.JPanel();
    comportCombobox = new javax.swing.JComboBox();
    customComportTextfield = new javax.swing.JTextField();
    jLabel4 = new javax.swing.JLabel();
    jLabel5 = new javax.swing.JLabel();
    connectToRadioButton = new javax.swing.JToggleButton();
    chooseRadioButton = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    infoTextarea = new javax.swing.JTextArea();
    controlPanel = new javax.swing.JPanel();
    bandsCombobox = new javax.swing.JComboBox();
    modesCombobox = new javax.swing.JComboBox();
    antennasCombobox = new javax.swing.JComboBox();
    frequencyTextLabel = new javax.swing.JLabel();
    modeTextLabel = new javax.swing.JLabel();
    antennaTextLabel = new javax.swing.JLabel();
    jMenuBar1 = new javax.swing.JMenuBar();
    jMenu1 = new javax.swing.JMenu();
    jMenu2 = new javax.swing.JMenu();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    radioPanel.setLayout(new java.awt.GridBagLayout());

    displayPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    displayPanel.setLayout(new java.awt.GridBagLayout());

    vfoAPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("VFO A"));
    vfoAPanel.setLayout(new java.awt.GridBagLayout());

    frequencyATextfield.setBackground(new java.awt.Color(1, 1, 1));
    frequencyATextfield.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
    frequencyATextfield.setForeground(new java.awt.Color(230, 230, 230));
    frequencyATextfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    frequencyATextfield.setText("frequency");
    frequencyATextfield.setCaretColor(new java.awt.Color(230, 230, 230));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    vfoAPanel.add(frequencyATextfield, gridBagConstraints);

    modeATextfield.setBackground(new java.awt.Color(1, 1, 1));
    modeATextfield.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
    modeATextfield.setForeground(new java.awt.Color(230, 230, 230));
    modeATextfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    modeATextfield.setText("mode");
    modeATextfield.setCaretColor(new java.awt.Color(230, 230, 230));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    vfoAPanel.add(modeATextfield, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    displayPanel.add(vfoAPanel, gridBagConstraints);

    vfoBPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("VFO B"));
    vfoBPanel.setLayout(new java.awt.GridBagLayout());

    frequencyBTextfield.setBackground(new java.awt.Color(1, 1, 1));
    frequencyBTextfield.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
    frequencyBTextfield.setForeground(new java.awt.Color(230, 230, 230));
    frequencyBTextfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    frequencyBTextfield.setText("frequency");
    frequencyBTextfield.setCaretColor(new java.awt.Color(230, 230, 230));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    vfoBPanel.add(frequencyBTextfield, gridBagConstraints);

    modeBTextfield.setBackground(new java.awt.Color(1, 1, 1));
    modeBTextfield.setFont(new java.awt.Font("Dialog", 0, 36)); // NOI18N
    modeBTextfield.setForeground(new java.awt.Color(230, 230, 230));
    modeBTextfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    modeBTextfield.setText("mode");
    modeBTextfield.setCaretColor(new java.awt.Color(230, 230, 230));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    vfoBPanel.add(modeBTextfield, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
    displayPanel.add(vfoBPanel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    radioPanel.add(displayPanel, gridBagConstraints);

    settingsPanel.setBackground(new java.awt.Color(210, 210, 210));
    settingsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    settingsPanel.setLayout(new java.awt.GridBagLayout());

    comportCombobox.setModel(getComportsComboboxModel());
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(20, 20, 0, 5);
    settingsPanel.add(comportCombobox, gridBagConstraints);

    customComportTextfield.setToolTipText("");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(20, 5, 0, 5);
    settingsPanel.add(customComportTextfield, gridBagConstraints);

    jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel4.setText("select ComPort");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 20, 20, 5);
    settingsPanel.add(jLabel4, gridBagConstraints);

    jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel5.setText("custom ComPort");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(0, 5, 20, 5);
    settingsPanel.add(jLabel5, gridBagConstraints);

    connectToRadioButton.setText("Connect/Disconnect");
    connectToRadioButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        connectToRadioButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
    settingsPanel.add(connectToRadioButton, gridBagConstraints);

    chooseRadioButton.setText("choose Radio");
    chooseRadioButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        chooseRadioButtonActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.1;
    gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
    settingsPanel.add(chooseRadioButton, gridBagConstraints);

    infoTextarea.setColumns(20);
    infoTextarea.setRows(5);
    jScrollPane1.setViewportView(infoTextarea);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.gridwidth = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(5, 20, 5, 5);
    settingsPanel.add(jScrollPane1, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.gridheight = 2;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
    gridBagConstraints.weightx = 0.3;
    gridBagConstraints.weighty = 1.0;
    radioPanel.add(settingsPanel, gridBagConstraints);

    controlPanel.setBackground(new java.awt.Color(200, 200, 200));
    controlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
    controlPanel.setLayout(new java.awt.GridBagLayout());

    bandsCombobox.setModel(getBandsComboboxModel()
    );
    bandsCombobox.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        bandsComboboxActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(20, 20, 3, 20);
    controlPanel.add(bandsCombobox, gridBagConstraints);

    modesCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    modesCombobox.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        modesComboboxActionPerformed(evt);
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(20, 20, 3, 20);
    controlPanel.add(modesCombobox, gridBagConstraints);

    antennasCombobox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(20, 20, 3, 20);
    controlPanel.add(antennasCombobox, gridBagConstraints);

    frequencyTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    frequencyTextLabel.setText("select Band");
    frequencyTextLabel.setToolTipText("");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(1, 20, 1, 20);
    controlPanel.add(frequencyTextLabel, gridBagConstraints);

    modeTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    modeTextLabel.setText("select Mode");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(1, 20, 1, 20);
    controlPanel.add(modeTextLabel, gridBagConstraints);

    antennaTextLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    antennaTextLabel.setText("select Antenna");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 2;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(1, 20, 1, 20);
    controlPanel.add(antennaTextLabel, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 0.3;
    radioPanel.add(controlPanel, gridBagConstraints);

    jMenuBar1.setMargin(new java.awt.Insets(2, 2, 2, 2));

    jMenu1.setText("File");
    jMenuBar1.add(jMenu1);

    jMenu2.setText("Show Tracer");
    jMenu2.setToolTipText("");
    jMenuBar1.add(jMenu2);

    setJMenuBar(jMenuBar1);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(radioPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(radioPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void chooseRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_chooseRadioButtonActionPerformed
  {//GEN-HEADEREND:event_chooseRadioButtonActionPerformed
    int returnVal = chooser.showOpenDialog(this.getParent());
    if(returnVal == JFileChooser.APPROVE_OPTION) 
    {
      String moduleName =  chooser.getSelectedFile().getName();
      moduleName = StringUtils.removeEnd(moduleName, ".py"); 
      
      String className = StringUtils.capitalize(moduleName); // The name of the Class withing the module(file) should be with the same name but with capital letter
      
      // Create radioParser object from the python Class
      JythonObjectFactory f2 = new JythonObjectFactory(I_Radio.class, moduleName, className);
      radioParser =  (I_Radio) f2.createObject(); 
     
      this.initModesCombobox(); 
      this.initInfoTextarea();
    }
  }//GEN-LAST:event_chooseRadioButtonActionPerformed

  private void connectToRadioButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_connectToRadioButtonActionPerformed
  {//GEN-HEADEREND:event_connectToRadioButtonActionPerformed
    JToggleButton tBtn = (JToggleButton) evt.getSource();

    try
    {
      // Connect
      // ----------
      if (tBtn.isSelected())
      {
        if(radioParser==null)
        {
          JOptionPane.showMessageDialog(null, "Choose a radio first!", "Warning...", JOptionPane.INFORMATION_MESSAGE);
          connectToRadioButton.setSelected(false);
          return;
        }
        
        // Get comm port name
        String name = customComportTextfield.getText();
        if(name.isEmpty())
          name = String.valueOf(comportCombobox.getSelectedItem());
        
        // Create the radio object using the selected Com port
        radio = new Radio(radioParser, name);
        radio.addEventListener(new LocalRadioListener());
        radio.connect(); // Let's not forget to call connect(). Calling disconnects() later will close the Com Port
      } 
      // Disconnect
      // ----------
      else
      {
        if (radio != null)
        {
          radio.disconnect();
          radio = null;
        }

      }
    } catch (Exception ex)
    {
      logger.log(Level.SEVERE, null, ex);
    }
  }//GEN-LAST:event_connectToRadioButtonActionPerformed

  private void bandsComboboxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bandsComboboxActionPerformed
  {//GEN-HEADEREND:event_bandsComboboxActionPerformed
    if(radio!=null)
    {
      String freq = bandsCombobox.getSelectedItem().toString();
      
      try
      {
        switch(freq)
        {
          case "1.8":
            radio.setFrequency(1810000, 0);
            //radio.getFrequency(0); // after setting the frequency let's ask which will update our display
            break;
          case "3.5":
            radio.setFrequency(3500000, 0);
            //radio.getFrequency(0); // after setting the frequency let's ask which will update our display
            break;
          case "7":
            radio.setFrequency(7000000, 0);
            //radio.getFrequency(0); // after setting the frequency let's ask which will update our display
            break;
          case "10":
            radio.setFrequency(10000000, 0);
            //radio.getFrequency(0); // after setting the frequency let's ask which will update our display
            break;
          case "14":
            radio.setFrequency(14000000, 0);
            //radio.getFrequency(0); // after setting the frequency let's ask which will update our display
            break;
          case "18":
            radio.setFrequency(18000000, 0);
            //radio.getFrequency(0); // after setting the frequency let's ask which will update our display
            break;
          case "21":
            radio.setFrequency(21000000, 0);
            //radio.getFrequency(0); // after setting the frequency let's ask which will update our display
            break;
          case "24":
            radio.setFrequency(24000000, 0);
            //radio.getFrequency(0); // after setting the frequency let's ask which will update our display
            break;
          case "28":
            radio.setFrequency(28000000, 0);
            //radio.getFrequency(0); // after setting the frequency let's ask which will update our display
            break;

        }
      }catch(Exception exc)
      {
        logger.log(Level.SEVERE, null, exc);
      }
      //freq = freq.replaceAll("[^0-9]+", "");    // remove all non-digits
    }
     
  }//GEN-LAST:event_bandsComboboxActionPerformed

  private void modesComboboxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_modesComboboxActionPerformed
  {//GEN-HEADEREND:event_modesComboboxActionPerformed
    if(radio!=null)
    {
      String mode = modesCombobox.getSelectedItem().toString();
      try
      {
        radio.setMode(mode, 0);
      } catch (Exception ex)
      {
        logger.log(Level.SEVERE, null, ex);
      }
    }
  }//GEN-LAST:event_modesComboboxActionPerformed


 
  
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try
    {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
      {
        if ("Nimbus".equals(info.getName()))
        {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex)
    {
      logger.log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex)
    {
      logger.log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex)
    {
      logger.log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex)
    {
      logger.log(java.util.logging.Level.SEVERE, null, ex);
    }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new SimpleRadioPanel().setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel antennaTextLabel;
  private javax.swing.JComboBox antennasCombobox;
  private javax.swing.JComboBox bandsCombobox;
  private javax.swing.JButton chooseRadioButton;
  private javax.swing.JComboBox comportCombobox;
  private javax.swing.JToggleButton connectToRadioButton;
  private javax.swing.JPanel controlPanel;
  private javax.swing.JTextField customComportTextfield;
  private javax.swing.JPanel displayPanel;
  private javax.swing.JTextField frequencyATextfield;
  private javax.swing.JTextField frequencyBTextfield;
  private javax.swing.JLabel frequencyTextLabel;
  private javax.swing.JTextArea infoTextarea;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JMenu jMenu1;
  private javax.swing.JMenu jMenu2;
  private javax.swing.JMenuBar jMenuBar1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextField modeATextfield;
  private javax.swing.JTextField modeBTextfield;
  private javax.swing.JLabel modeTextLabel;
  private javax.swing.JComboBox modesCombobox;
  private javax.swing.JPanel radioPanel;
  private javax.swing.JPanel settingsPanel;
  private javax.swing.JPanel vfoAPanel;
  private javax.swing.JPanel vfoBPanel;
  // End of variables declaration//GEN-END:variables
}
